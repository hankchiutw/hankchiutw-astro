---
import MainLayout from '../../layouts/MainLayout.astro';
import { getPostBySlug, getPosts } from '../../lib/strapi';
import type { StrapiCategory, StrapiPost } from '../../lib/strapi.types';

export async function getStaticPaths() {
  // Fetch all posts to generate static paths
  const posts = await getPosts();

  // Use fallback posts if no posts from API
  const fallbackPosts = [
    {
      attributes: {
        title: 'Getting Started with Astro',
        slug: 'getting-started-with-astro',
      },
    },
    {
      attributes: {
        title: 'Writing Clean TypeScript Code',
        slug: 'writing-clean-typescript-code',
      },
    },
    {
      attributes: {
        title: 'React Performance Optimization Techniques',
        slug: 'react-performance-optimization',
      },
    },
  ];

  const allPosts = posts.length > 0 ? posts : fallbackPosts;

  return allPosts.map((post: any) => {
    return {
      params: { slug: post.attributes.slug },
      props: { postSlug: post.attributes.slug },
    };
  });
}

const { postSlug } = Astro.props;
const post = await getPostBySlug(postSlug);

// Fallback post content if API post not found
const fallbackPost: StrapiPost = {
  id: 1,
  attributes: {
    title: 'Getting Started with Astro',
    slug: 'getting-started-with-astro',
    description:
      'A guide to building static sites with Astro - the modern framework for content-focused websites.',
    content: `
      <h2>Introduction to Astro</h2>
      <p>Astro is a modern static site builder that delivers lightning-fast performance with a great developer experience. Unlike traditional JavaScript frameworks, Astro is designed to ship less JavaScript by default, resulting in faster websites.</p>
      
      <h2>Key Features</h2>
      <ul>
        <li><strong>Component Islands</strong> - Use your favorite UI components from React, Vue, Svelte, and others, but render them to HTML at build time.</li>
        <li><strong>Zero JS by default</strong> - No JavaScript runtime overhead to slow your site down.</li>
        <li><strong>Edge-ready</strong> - Deploy anywhere, even global edge runtimes like Deno or Cloudflare Workers.</li>
        <li><strong>Customizable</strong> - TypeScript, Scoped CSS, CSS Modules, Sass, Tailwind, Markdown, MDX, and more.</li>
      </ul>
      
      <h2>Getting Started</h2>
      <p>To create your first Astro project, run the following command in your terminal:</p>
      <pre><code>npm create astro@latest</code></pre>
      
      <p>Follow the prompts to set up your new project, then navigate to the project directory and start the development server:</p>
      <pre><code>cd my-astro-project
npm run dev</code></pre>
      
      <h2>Conclusion</h2>
      <p>Astro offers a modern approach to building websites that prioritizes performance without sacrificing developer experience. Give it a try for your next project!</p>
    `,
    publishedAt: new Date(2023, 5, 15).toISOString(),
    cover: {
      data: {
        attributes: {
          url: 'https://picsum.photos/800/450',
          alternativeText: 'Astro logo with stars in the background',
        },
      },
    },
    author: {
      data: {
        attributes: {
          name: 'Hank Chiu',
        },
      },
    },
    categories: {
      data: [
        { id: 1, attributes: { name: 'Web Development' } },
        { id: 2, attributes: { name: 'Astro' } },
      ],
    },
  },
};

// Use API post if available, otherwise fallback
const displayPost = post || fallbackPost;

// Format the date for display
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}
---

<MainLayout title={displayPost.attributes.title}>
  <article class="post-container">
    <div class="post-header">
      {
        displayPost.attributes.cover?.data && (
          <div class="post-cover">
            <img
              src={displayPost.attributes.cover.data.attributes.url}
              alt={
                displayPost.attributes.cover.data.attributes.alternativeText ||
                displayPost.attributes.title
              }
            />
          </div>
        )
      }
      <h1 class="post-title">{displayPost.attributes.title}</h1>
      <div class="post-meta">
        <span class="post-date">
          <i class="far fa-calendar-alt"></i>
          {formatDate(displayPost.attributes.publishedAt)}
        </span>
        {
          displayPost.attributes.author?.data && (
            <span class="post-author">
              <i class="far fa-user" /> {displayPost.attributes.author.data.attributes.name}
            </span>
          )
        }
      </div>
      {
        displayPost.attributes.categories?.data && (
          <div class="post-categories">
            {displayPost.attributes.categories.data.map((category: StrapiCategory) => (
              <span class="category-tag">
                <i class="fas fa-tag" /> {category.attributes.name}
              </span>
            ))}
          </div>
        )
      }
    </div>

    <div class="post-content">
      <div set:html={displayPost.attributes.content} />
    </div>

    <div class="post-footer">
      <a href="/writings" class="back-link">
        <i class="fas fa-arrow-left"></i> Back to all writings
      </a>
    </div>
  </article>
</MainLayout>

<style>
  .post-container {
    max-width: var(--content-max);
    margin: 0 auto;
    padding: 2rem 0;
  }

  .post-header {
    margin-bottom: 2rem;
    text-align: center;
  }

  .post-cover {
    border-radius: var(--radius-md);
    overflow: hidden;
    margin-bottom: 2rem;
    box-shadow: 0 5px 15px var(--shadow-color);
  }

  .post-cover img {
    width: 100%;
    height: auto;
    display: block;
  }

  .post-title {
    font-size: clamp(1.8rem, 5vw, 2.5rem);
    line-height: 1.2;
    margin-bottom: 1rem;
    color: var(--primary-color);
  }

  .post-meta {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: var(--text-color-light);
  }

  .post-date,
  .post-author {
    display: flex;
    align-items: center;
    gap: 0.4rem;
  }

  .post-categories {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 2rem;
  }

  .category-tag {
    background-color: rgba(var(--primary-color-rgb), 0.1);
    color: var(--text-color);
    padding: 0.3rem 0.6rem;
    border-radius: var(--radius-sm);
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    gap: 0.3rem;
  }

  .category-tag i {
    font-size: 0.75rem;
    color: var(--primary-color);
  }

  .post-content {
    font-size: clamp(1rem, 2vw, 1.1rem);
    line-height: 1.7;
    color: var(--text-color);
  }

  .post-content h2 {
    font-size: 1.5rem;
    color: var(--primary-color);
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .post-content p {
    margin-bottom: 1.5rem;
  }

  .post-content ul,
  .post-content ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .post-content li {
    margin-bottom: 0.5rem;
  }

  .post-content pre {
    background-color: var(--code-bg);
    padding: 1rem;
    border-radius: var(--radius-sm);
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }

  .post-content code {
    font-family: monospace;
    font-size: 0.9em;
  }

  .post-footer {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-color);
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    color: var(--primary-color);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .back-link:hover {
    color: var(--primary-color-dark);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .post-container {
      padding: 1.5rem 1rem;
    }

    .post-meta {
      flex-direction: column;
      gap: 0.5rem;
      align-items: center;
    }
  }
</style>
